/* tslint:disable */
/* eslint-disable */
/**
 * Planship API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  IdNameOrmBase,
  IdNameSlugOrmBase,
  Lever,
  Plan,
  PlanInList,
  PlanSubscriptionCreate,
  Product,
  SubscriptionWithPlan,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    IdNameOrmBaseFromJSON,
    IdNameOrmBaseToJSON,
    IdNameSlugOrmBaseFromJSON,
    IdNameSlugOrmBaseToJSON,
    LeverFromJSON,
    LeverToJSON,
    PlanFromJSON,
    PlanToJSON,
    PlanInListFromJSON,
    PlanInListToJSON,
    PlanSubscriptionCreateFromJSON,
    PlanSubscriptionCreateToJSON,
    ProductFromJSON,
    ProductToJSON,
    SubscriptionWithPlanFromJSON,
    SubscriptionWithPlanToJSON,
} from '../models';

export interface CreatePlanSubscriptionRequest {
    productSlug: string;
    slug: string;
    planSubscriptionCreate: PlanSubscriptionCreate;
}

export interface GetProductRequest {
    slug: string;
}

export interface GetProductLeverRequest {
    productSlug: string;
    slug: string;
}

export interface GetProductPlanRequest {
    productSlug: string;
    slug: string;
}

export interface GetProductPlanEntitlementsRequest {
    productSlug: string;
    slug: string;
}

export interface ListProductLeversRequest {
    slug: string;
}

export interface ListProductPlansRequest {
    slug: string;
    publicOnly?: boolean;
    orderBy?: string;
}

export interface ListProductsRequest {
    skip?: number;
    limit?: number;
}

/**
 * 
 */
export class ProductsApi extends runtime.BaseAPI {

    /**
     * Create a subscription to the product plan with given product and plan slugs for the customer described in subscription_customer_in. Organization is determined by the Planship API auth token.
     * Create Plan Subscription
     */
    async createPlanSubscriptionRaw(requestParameters: CreatePlanSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionWithPlan>> {
        if (requestParameters.productSlug === null || requestParameters.productSlug === undefined) {
            throw new runtime.RequiredError('productSlug','Required parameter requestParameters.productSlug was null or undefined when calling createPlanSubscription.');
        }

        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling createPlanSubscription.');
        }

        if (requestParameters.planSubscriptionCreate === null || requestParameters.planSubscriptionCreate === undefined) {
            throw new runtime.RequiredError('planSubscriptionCreate','Required parameter requestParameters.planSubscriptionCreate was null or undefined when calling createPlanSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/api/v1/products/{product_slug}/plans/{slug}/subscriptions`.replace(`{${"product_slug"}}`, encodeURIComponent(String(requestParameters.productSlug))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlanSubscriptionCreateToJSON(requestParameters.planSubscriptionCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionWithPlanFromJSON(jsonValue));
    }

    /**
     * Create a subscription to the product plan with given product and plan slugs for the customer described in subscription_customer_in. Organization is determined by the Planship API auth token.
     * Create Plan Subscription
     */
    async createPlanSubscription(requestParameters: CreatePlanSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionWithPlan> {
        const response = await this.createPlanSubscriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a product with a given slug in the current organization. Organization is determined by the Planship API auth token.
     * Get Product
     */
    async getProductRaw(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Product>> {
        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling getProduct.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/api/v1/products/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductFromJSON(jsonValue));
    }

    /**
     * Get a product with a given slug in the current organization. Organization is determined by the Planship API auth token.
     * Get Product
     */
    async getProduct(requestParameters: GetProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Product> {
        const response = await this.getProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the product lever for given product and lever slugs in the current organization. Organization is determined by the Planship API auth token.
     * Get Product Lever
     */
    async getProductLeverRaw(requestParameters: GetProductLeverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lever>> {
        if (requestParameters.productSlug === null || requestParameters.productSlug === undefined) {
            throw new runtime.RequiredError('productSlug','Required parameter requestParameters.productSlug was null or undefined when calling getProductLever.');
        }

        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling getProductLever.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/api/v1/products/{product_slug}/levers/{slug}`.replace(`{${"product_slug"}}`, encodeURIComponent(String(requestParameters.productSlug))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeverFromJSON(jsonValue));
    }

    /**
     * Get the product lever for given product and lever slugs in the current organization. Organization is determined by the Planship API auth token.
     * Get Product Lever
     */
    async getProductLever(requestParameters: GetProductLeverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lever> {
        const response = await this.getProductLeverRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the product plan for given product and lever slugs in the current organization. Organization is determined by the Planship API auth token.
     * Get Product Plan
     */
    async getProductPlanRaw(requestParameters: GetProductPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Plan>> {
        if (requestParameters.productSlug === null || requestParameters.productSlug === undefined) {
            throw new runtime.RequiredError('productSlug','Required parameter requestParameters.productSlug was null or undefined when calling getProductPlan.');
        }

        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling getProductPlan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/api/v1/products/{product_slug}/plans/{slug}`.replace(`{${"product_slug"}}`, encodeURIComponent(String(requestParameters.productSlug))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanFromJSON(jsonValue));
    }

    /**
     * Get the product plan for given product and lever slugs in the current organization. Organization is determined by the Planship API auth token.
     * Get Product Plan
     */
    async getProductPlan(requestParameters: GetProductPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Plan> {
        const response = await this.getProductPlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all entitlements for the product plan with given product and plan slugs in the current organization. Organization is determined by the Planship API auth token.
     * Get Product Plan Entitlements
     */
    async getProductPlanEntitlementsRaw(requestParameters: GetProductPlanEntitlementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IdNameOrmBase>>> {
        if (requestParameters.productSlug === null || requestParameters.productSlug === undefined) {
            throw new runtime.RequiredError('productSlug','Required parameter requestParameters.productSlug was null or undefined when calling getProductPlanEntitlements.');
        }

        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling getProductPlanEntitlements.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/api/v1/products/{product_slug}/plans/{slug}/entitlements`.replace(`{${"product_slug"}}`, encodeURIComponent(String(requestParameters.productSlug))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IdNameOrmBaseFromJSON));
    }

    /**
     * List all entitlements for the product plan with given product and plan slugs in the current organization. Organization is determined by the Planship API auth token.
     * Get Product Plan Entitlements
     */
    async getProductPlanEntitlements(requestParameters: GetProductPlanEntitlementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IdNameOrmBase>> {
        const response = await this.getProductPlanEntitlementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all levers for the product with a given slug in the current organization. Organization is determined by the Planship API auth token.
     * List Product Levers
     */
    async listProductLeversRaw(requestParameters: ListProductLeversRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IdNameSlugOrmBase>>> {
        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling listProductLevers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/api/v1/products/{slug}/levers`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IdNameSlugOrmBaseFromJSON));
    }

    /**
     * List all levers for the product with a given slug in the current organization. Organization is determined by the Planship API auth token.
     * List Product Levers
     */
    async listProductLevers(requestParameters: ListProductLeversRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IdNameSlugOrmBase>> {
        const response = await this.listProductLeversRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all plans for the product with a given slug in the current organization. Organization is determined by the Planship API auth token.
     * List Product Plans
     */
    async listProductPlansRaw(requestParameters: ListProductPlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlanInList>>> {
        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling listProductPlans.');
        }

        const queryParameters: any = {};

        if (requestParameters.publicOnly !== undefined) {
            queryParameters['public_only'] = requestParameters.publicOnly;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/api/v1/products/{slug}/plans`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlanInListFromJSON));
    }

    /**
     * List all plans for the product with a given slug in the current organization. Organization is determined by the Planship API auth token.
     * List Product Plans
     */
    async listProductPlans(requestParameters: ListProductPlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlanInList>> {
        const response = await this.listProductPlansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all products in the current organization. Organization is determined by the Planship API auth token.
     * List Products
     */
    async listProductsRaw(requestParameters: ListProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IdNameSlugOrmBase>>> {
        const queryParameters: any = {};

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/api/v1/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IdNameSlugOrmBaseFromJSON));
    }

    /**
     * List all products in the current organization. Organization is determined by the Planship API auth token.
     * List Products
     */
    async listProducts(requestParameters: ListProductsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IdNameSlugOrmBase>> {
        const response = await this.listProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
