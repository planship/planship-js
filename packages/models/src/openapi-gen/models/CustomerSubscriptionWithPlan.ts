/* tslint:disable */
/* eslint-disable */
/**
 * Planship API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { IdNameSlugOrmBase } from './IdNameSlugOrmBase.js';
import {
    IdNameSlugOrmBaseFromJSON,
    IdNameSlugOrmBaseFromJSONTyped,
    IdNameSlugOrmBaseToJSON,
} from './IdNameSlugOrmBase.js';

/**
 * 
 * @export
 * @interface CustomerSubscriptionWithPlan
 */
export interface CustomerSubscriptionWithPlan {
    /**
     * 
     * @type {object}
     * @memberof CustomerSubscriptionWithPlan
     */
    metadata?: object;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerSubscriptionWithPlan
     */
    isAdministrator?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerSubscriptionWithPlan
     */
    isSubscriber?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriptionWithPlan
     */
    customerId: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriptionWithPlan
     */
    subscriptionId: string;
    /**
     * 
     * @type {number}
     * @memberof CustomerSubscriptionWithPlan
     */
    maxSubscribers?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerSubscriptionWithPlan
     */
    autoRenew: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerSubscriptionWithPlan
     */
    isActive: boolean;
    /**
     * 
     * @type {Date}
     * @memberof CustomerSubscriptionWithPlan
     */
    renewAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof CustomerSubscriptionWithPlan
     */
    lastRenewedAt: Date;
    /**
     * 
     * @type {IdNameSlugOrmBase}
     * @memberof CustomerSubscriptionWithPlan
     */
    plan: IdNameSlugOrmBase;
    /**
     * 
     * @type {IdNameSlugOrmBase}
     * @memberof CustomerSubscriptionWithPlan
     */
    renewPlan: IdNameSlugOrmBase;
}

/**
 * Check if a given object implements the CustomerSubscriptionWithPlan interface.
 */
export function instanceOfCustomerSubscriptionWithPlan(value: object): value is CustomerSubscriptionWithPlan {
    if (!('customerId' in value) || value['customerId'] === undefined) return false;
    if (!('subscriptionId' in value) || value['subscriptionId'] === undefined) return false;
    if (!('autoRenew' in value) || value['autoRenew'] === undefined) return false;
    if (!('isActive' in value) || value['isActive'] === undefined) return false;
    if (!('renewAt' in value) || value['renewAt'] === undefined) return false;
    if (!('lastRenewedAt' in value) || value['lastRenewedAt'] === undefined) return false;
    if (!('plan' in value) || value['plan'] === undefined) return false;
    if (!('renewPlan' in value) || value['renewPlan'] === undefined) return false;
    return true;
}

export function CustomerSubscriptionWithPlanFromJSON(json: any): CustomerSubscriptionWithPlan {
    return CustomerSubscriptionWithPlanFromJSONTyped(json, false);
}

export function CustomerSubscriptionWithPlanFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerSubscriptionWithPlan {
    if (json == null) {
        return json;
    }
    return {
        
        'metadata': json['metadata_'] == null ? undefined : json['metadata_'],
        'isAdministrator': json['is_administrator'] == null ? undefined : json['is_administrator'],
        'isSubscriber': json['is_subscriber'] == null ? undefined : json['is_subscriber'],
        'customerId': json['customer_id'],
        'subscriptionId': json['subscription_id'],
        'maxSubscribers': json['max_subscribers'] == null ? undefined : json['max_subscribers'],
        'autoRenew': json['auto_renew'],
        'isActive': json['is_active'],
        'renewAt': (new Date(json['renew_at'])),
        'lastRenewedAt': (new Date(json['last_renewed_at'])),
        'plan': IdNameSlugOrmBaseFromJSON(json['plan']),
        'renewPlan': IdNameSlugOrmBaseFromJSON(json['renew_plan']),
    };
}

export function CustomerSubscriptionWithPlanToJSON(value?: CustomerSubscriptionWithPlan | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'metadata_': value['metadata'],
        'is_administrator': value['isAdministrator'],
        'is_subscriber': value['isSubscriber'],
        'customer_id': value['customerId'],
        'subscription_id': value['subscriptionId'],
        'max_subscribers': value['maxSubscribers'],
        'auto_renew': value['autoRenew'],
        'is_active': value['isActive'],
        'renew_at': ((value['renewAt']).toISOString()),
        'last_renewed_at': ((value['lastRenewedAt']).toISOString()),
        'plan': IdNameSlugOrmBaseToJSON(value['plan']),
        'renew_plan': IdNameSlugOrmBaseToJSON(value['renewPlan']),
    };
}

