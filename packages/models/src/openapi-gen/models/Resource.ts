/* tslint:disable */
/* eslint-disable */
/**
 * Planship API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Resource
 */
export interface Resource {
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    slug: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof Resource
     */
    displayOrder?: number;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    displayDescription?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Resource
     */
    displayExtraAttributes?: { [key: string]: string; };
    /**
     * 
     * @type {object}
     * @memberof Resource
     */
    configuration?: object;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    entitlementDisplayValueTemplate?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    entitlementDisplayNameTemplate?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    entitlementDisplayDescriptionTemplate?: string;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    resourceTypeId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Resource
     */
    meteringIds: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Resource
     */
    productId: string;
    /**
     * 
     * @type {object}
     * @memberof Resource
     */
    entitlementSchemaJson?: object;
}

/**
 * Check if a given object implements the Resource interface.
 */
export function instanceOfResource(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "slug" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "resourceTypeId" in value;
    isInstance = isInstance && "meteringIds" in value;
    isInstance = isInstance && "productId" in value;

    return isInstance;
}

export function ResourceFromJSON(json: any): Resource {
    return ResourceFromJSONTyped(json, false);
}

export function ResourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Resource {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'slug': json['slug'],
        'id': json['id'],
        'displayOrder': !exists(json, 'display_order') ? undefined : json['display_order'],
        'displayName': !exists(json, 'display_name') ? undefined : json['display_name'],
        'displayDescription': !exists(json, 'display_description') ? undefined : json['display_description'],
        'displayExtraAttributes': !exists(json, 'display_extra_attributes') ? undefined : json['display_extra_attributes'],
        'configuration': !exists(json, 'configuration') ? undefined : json['configuration'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'name': json['name'],
        'entitlementDisplayValueTemplate': !exists(json, 'entitlement_display_value_template') ? undefined : json['entitlement_display_value_template'],
        'entitlementDisplayNameTemplate': !exists(json, 'entitlement_display_name_template') ? undefined : json['entitlement_display_name_template'],
        'entitlementDisplayDescriptionTemplate': !exists(json, 'entitlement_display_description_template') ? undefined : json['entitlement_display_description_template'],
        'resourceTypeId': json['resource_type_id'],
        'meteringIds': json['metering_ids'],
        'productId': json['product_id'],
        'entitlementSchemaJson': !exists(json, 'entitlement_schema_json') ? undefined : json['entitlement_schema_json'],
    };
}

export function ResourceToJSON(value?: Resource | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'slug': value.slug,
        'id': value.id,
        'display_order': value.displayOrder,
        'display_name': value.displayName,
        'display_description': value.displayDescription,
        'display_extra_attributes': value.displayExtraAttributes,
        'configuration': value.configuration,
        'description': value.description,
        'name': value.name,
        'entitlement_display_value_template': value.entitlementDisplayValueTemplate,
        'entitlement_display_name_template': value.entitlementDisplayNameTemplate,
        'entitlement_display_description_template': value.entitlementDisplayDescriptionTemplate,
        'resource_type_id': value.resourceTypeId,
        'metering_ids': value.meteringIds,
        'product_id': value.productId,
        'entitlement_schema_json': value.entitlementSchemaJson,
    };
}

