/* tslint:disable */
/* eslint-disable */
/**
 * Planship API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { LeverUsage } from '../models';
// @ts-ignore
import { MeteredUsageIn } from '../models';
// @ts-ignore
import { MeteringRecord } from '../models';
/**
 * MeteredUsageApi - axios parameter creator
 * @export
 */
export const MeteredUsageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Lever Usage For Customer
         * @param {string} customerId 
         * @param {string} productSlug 
         * @param {string} leverSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeverUsageForCustomer: async (customerId: string, productSlug: string, leverSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getLeverUsageForCustomer', 'customerId', customerId)
            // verify required parameter 'productSlug' is not null or undefined
            assertParamExists('getLeverUsageForCustomer', 'productSlug', productSlug)
            // verify required parameter 'leverSlug' is not null or undefined
            assertParamExists('getLeverUsageForCustomer', 'leverSlug', leverSlug)
            const localVarPath = `/api/v1/customers/{customer_id}/products/{product_slug}/levers/{lever_slug}/usage`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"product_slug"}}`, encodeURIComponent(String(productSlug)))
                .replace(`{${"lever_slug"}}`, encodeURIComponent(String(leverSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2ClientCredentials", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Metering Id Levers Usage For Customer
         * @param {string} customerId 
         * @param {string} productSlug 
         * @param {string} meteringId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeteringIdLeversUsageForCustomer: async (customerId: string, productSlug: string, meteringId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getMeteringIdLeversUsageForCustomer', 'customerId', customerId)
            // verify required parameter 'productSlug' is not null or undefined
            assertParamExists('getMeteringIdLeversUsageForCustomer', 'productSlug', productSlug)
            // verify required parameter 'meteringId' is not null or undefined
            assertParamExists('getMeteringIdLeversUsageForCustomer', 'meteringId', meteringId)
            const localVarPath = `/api/v1/customers/{customer_id}/products/{product_slug}/usage/{metering_id}`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"product_slug"}}`, encodeURIComponent(String(productSlug)))
                .replace(`{${"metering_id"}}`, encodeURIComponent(String(meteringId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2ClientCredentials", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Report Metered Usage For Customer
         * @param {string} customerId 
         * @param {string} productSlug 
         * @param {string} meteringId 
         * @param {MeteredUsageIn} meteredUsageIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportMeteredUsageForCustomer: async (customerId: string, productSlug: string, meteringId: string, meteredUsageIn: MeteredUsageIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('reportMeteredUsageForCustomer', 'customerId', customerId)
            // verify required parameter 'productSlug' is not null or undefined
            assertParamExists('reportMeteredUsageForCustomer', 'productSlug', productSlug)
            // verify required parameter 'meteringId' is not null or undefined
            assertParamExists('reportMeteredUsageForCustomer', 'meteringId', meteringId)
            // verify required parameter 'meteredUsageIn' is not null or undefined
            assertParamExists('reportMeteredUsageForCustomer', 'meteredUsageIn', meteredUsageIn)
            const localVarPath = `/api/v1/customers/{customer_id}/products/{product_slug}/usage/{metering_id}`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"product_slug"}}`, encodeURIComponent(String(productSlug)))
                .replace(`{${"metering_id"}}`, encodeURIComponent(String(meteringId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2ClientCredentials", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(meteredUsageIn, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeteredUsageApi - functional programming interface
 * @export
 */
export const MeteredUsageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeteredUsageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Lever Usage For Customer
         * @param {string} customerId 
         * @param {string} productSlug 
         * @param {string} leverSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeverUsageForCustomer(customerId: string, productSlug: string, leverSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeverUsage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeverUsageForCustomer(customerId, productSlug, leverSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Metering Id Levers Usage For Customer
         * @param {string} customerId 
         * @param {string} productSlug 
         * @param {string} meteringId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeteringIdLeversUsageForCustomer(customerId: string, productSlug: string, meteringId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: LeverUsage; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeteringIdLeversUsageForCustomer(customerId, productSlug, meteringId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Report Metered Usage For Customer
         * @param {string} customerId 
         * @param {string} productSlug 
         * @param {string} meteringId 
         * @param {MeteredUsageIn} meteredUsageIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportMeteredUsageForCustomer(customerId: string, productSlug: string, meteringId: string, meteredUsageIn: MeteredUsageIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeteringRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportMeteredUsageForCustomer(customerId, productSlug, meteringId, meteredUsageIn, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeteredUsageApi - factory interface
 * @export
 */
export const MeteredUsageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeteredUsageApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Lever Usage For Customer
         * @param {string} customerId 
         * @param {string} productSlug 
         * @param {string} leverSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeverUsageForCustomer(customerId: string, productSlug: string, leverSlug: string, options?: any): AxiosPromise<LeverUsage> {
            return localVarFp.getLeverUsageForCustomer(customerId, productSlug, leverSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Metering Id Levers Usage For Customer
         * @param {string} customerId 
         * @param {string} productSlug 
         * @param {string} meteringId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeteringIdLeversUsageForCustomer(customerId: string, productSlug: string, meteringId: string, options?: any): AxiosPromise<{ [key: string]: LeverUsage; }> {
            return localVarFp.getMeteringIdLeversUsageForCustomer(customerId, productSlug, meteringId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Report Metered Usage For Customer
         * @param {string} customerId 
         * @param {string} productSlug 
         * @param {string} meteringId 
         * @param {MeteredUsageIn} meteredUsageIn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportMeteredUsageForCustomer(customerId: string, productSlug: string, meteringId: string, meteredUsageIn: MeteredUsageIn, options?: any): AxiosPromise<MeteringRecord> {
            return localVarFp.reportMeteredUsageForCustomer(customerId, productSlug, meteringId, meteredUsageIn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MeteredUsageApi - object-oriented interface
 * @export
 * @class MeteredUsageApi
 * @extends {BaseAPI}
 */
export class MeteredUsageApi extends BaseAPI {
    /**
     * 
     * @summary Get Lever Usage For Customer
     * @param {string} customerId 
     * @param {string} productSlug 
     * @param {string} leverSlug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteredUsageApi
     */
    public getLeverUsageForCustomer(customerId: string, productSlug: string, leverSlug: string, options?: AxiosRequestConfig) {
        return MeteredUsageApiFp(this.configuration).getLeverUsageForCustomer(customerId, productSlug, leverSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Metering Id Levers Usage For Customer
     * @param {string} customerId 
     * @param {string} productSlug 
     * @param {string} meteringId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteredUsageApi
     */
    public getMeteringIdLeversUsageForCustomer(customerId: string, productSlug: string, meteringId: string, options?: AxiosRequestConfig) {
        return MeteredUsageApiFp(this.configuration).getMeteringIdLeversUsageForCustomer(customerId, productSlug, meteringId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Report Metered Usage For Customer
     * @param {string} customerId 
     * @param {string} productSlug 
     * @param {string} meteringId 
     * @param {MeteredUsageIn} meteredUsageIn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteredUsageApi
     */
    public reportMeteredUsageForCustomer(customerId: string, productSlug: string, meteringId: string, meteredUsageIn: MeteredUsageIn, options?: AxiosRequestConfig) {
        return MeteredUsageApiFp(this.configuration).reportMeteredUsageForCustomer(customerId, productSlug, meteringId, meteredUsageIn, options).then((request) => request(this.axios, this.basePath));
    }
}
