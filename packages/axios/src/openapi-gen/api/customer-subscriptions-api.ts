/* tslint:disable */
/* eslint-disable */
/**
 * Planship API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomerSubscriptionWithPlan } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { SubscriptionCreate } from '../models';
// @ts-ignore
import { SubscriptionUpdateWithSlugs } from '../models';
// @ts-ignore
import { SubscriptionWithPlan } from '../models';
/**
 * CustomerSubscriptionsApi - axios parameter creator
 * @export
 */
export const CustomerSubscriptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Plan Subscription For Customer
         * @param {string} customerId 
         * @param {SubscriptionCreate} subscriptionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlanSubscriptionForCustomer: async (customerId: string, subscriptionCreate: SubscriptionCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('createPlanSubscriptionForCustomer', 'customerId', customerId)
            // verify required parameter 'subscriptionCreate' is not null or undefined
            assertParamExists('createPlanSubscriptionForCustomer', 'subscriptionCreate', subscriptionCreate)
            const localVarPath = `/api/v1/customers/{customer_id}/subscriptions`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2ClientCredentials", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Customer Plan Subscription
         * @param {string} customerId 
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerPlanSubscription: async (customerId: string, subscriptionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getCustomerPlanSubscription', 'customerId', customerId)
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('getCustomerPlanSubscription', 'subscriptionId', subscriptionId)
            const localVarPath = `/api/v1/customers/{customer_id}/subscriptions/{subscription_id}`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2ClientCredentials", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Customer Plan Subscriptions
         * @param {string} customerId 
         * @param {string} [productSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerPlanSubscriptions: async (customerId: string, productSlug?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('listCustomerPlanSubscriptions', 'customerId', customerId)
            const localVarPath = `/api/v1/customers/{customer_id}/subscriptions`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2ClientCredentials", [], configuration)

            if (productSlug !== undefined) {
                localVarQueryParameter['product_slug'] = productSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Modify Customer Plan Subscription
         * @param {string} customerId 
         * @param {string} subscriptionId 
         * @param {SubscriptionUpdateWithSlugs} subscriptionUpdateWithSlugs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCustomerPlanSubscription: async (customerId: string, subscriptionId: string, subscriptionUpdateWithSlugs: SubscriptionUpdateWithSlugs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('modifyCustomerPlanSubscription', 'customerId', customerId)
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('modifyCustomerPlanSubscription', 'subscriptionId', subscriptionId)
            // verify required parameter 'subscriptionUpdateWithSlugs' is not null or undefined
            assertParamExists('modifyCustomerPlanSubscription', 'subscriptionUpdateWithSlugs', subscriptionUpdateWithSlugs)
            const localVarPath = `/api/v1/customers/{customer_id}/subscriptions/{subscription_id}`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"subscription_id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oAuth2ClientCredentials", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionUpdateWithSlugs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerSubscriptionsApi - functional programming interface
 * @export
 */
export const CustomerSubscriptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerSubscriptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Plan Subscription For Customer
         * @param {string} customerId 
         * @param {SubscriptionCreate} subscriptionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlanSubscriptionForCustomer(customerId: string, subscriptionCreate: SubscriptionCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionWithPlan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlanSubscriptionForCustomer(customerId, subscriptionCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Customer Plan Subscription
         * @param {string} customerId 
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerPlanSubscription(customerId: string, subscriptionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerSubscriptionWithPlan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerPlanSubscription(customerId, subscriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Customer Plan Subscriptions
         * @param {string} customerId 
         * @param {string} [productSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomerPlanSubscriptions(customerId: string, productSlug?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerSubscriptionWithPlan>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCustomerPlanSubscriptions(customerId, productSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Modify Customer Plan Subscription
         * @param {string} customerId 
         * @param {string} subscriptionId 
         * @param {SubscriptionUpdateWithSlugs} subscriptionUpdateWithSlugs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async modifyCustomerPlanSubscription(customerId: string, subscriptionId: string, subscriptionUpdateWithSlugs: SubscriptionUpdateWithSlugs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerSubscriptionWithPlan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.modifyCustomerPlanSubscription(customerId, subscriptionId, subscriptionUpdateWithSlugs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerSubscriptionsApi - factory interface
 * @export
 */
export const CustomerSubscriptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerSubscriptionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Plan Subscription For Customer
         * @param {string} customerId 
         * @param {SubscriptionCreate} subscriptionCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlanSubscriptionForCustomer(customerId: string, subscriptionCreate: SubscriptionCreate, options?: any): AxiosPromise<SubscriptionWithPlan> {
            return localVarFp.createPlanSubscriptionForCustomer(customerId, subscriptionCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Customer Plan Subscription
         * @param {string} customerId 
         * @param {string} subscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerPlanSubscription(customerId: string, subscriptionId: string, options?: any): AxiosPromise<CustomerSubscriptionWithPlan> {
            return localVarFp.getCustomerPlanSubscription(customerId, subscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Customer Plan Subscriptions
         * @param {string} customerId 
         * @param {string} [productSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomerPlanSubscriptions(customerId: string, productSlug?: string, options?: any): AxiosPromise<Array<CustomerSubscriptionWithPlan>> {
            return localVarFp.listCustomerPlanSubscriptions(customerId, productSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Modify Customer Plan Subscription
         * @param {string} customerId 
         * @param {string} subscriptionId 
         * @param {SubscriptionUpdateWithSlugs} subscriptionUpdateWithSlugs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        modifyCustomerPlanSubscription(customerId: string, subscriptionId: string, subscriptionUpdateWithSlugs: SubscriptionUpdateWithSlugs, options?: any): AxiosPromise<CustomerSubscriptionWithPlan> {
            return localVarFp.modifyCustomerPlanSubscription(customerId, subscriptionId, subscriptionUpdateWithSlugs, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CustomerSubscriptionsApi - object-oriented interface
 * @export
 * @class CustomerSubscriptionsApi
 * @extends {BaseAPI}
 */
export class CustomerSubscriptionsApi extends BaseAPI {
    /**
     * 
     * @summary Create Plan Subscription For Customer
     * @param {string} customerId 
     * @param {SubscriptionCreate} subscriptionCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSubscriptionsApi
     */
    public createPlanSubscriptionForCustomer(customerId: string, subscriptionCreate: SubscriptionCreate, options?: AxiosRequestConfig) {
        return CustomerSubscriptionsApiFp(this.configuration).createPlanSubscriptionForCustomer(customerId, subscriptionCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Customer Plan Subscription
     * @param {string} customerId 
     * @param {string} subscriptionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSubscriptionsApi
     */
    public getCustomerPlanSubscription(customerId: string, subscriptionId: string, options?: AxiosRequestConfig) {
        return CustomerSubscriptionsApiFp(this.configuration).getCustomerPlanSubscription(customerId, subscriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Customer Plan Subscriptions
     * @param {string} customerId 
     * @param {string} [productSlug] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSubscriptionsApi
     */
    public listCustomerPlanSubscriptions(customerId: string, productSlug?: string, options?: AxiosRequestConfig) {
        return CustomerSubscriptionsApiFp(this.configuration).listCustomerPlanSubscriptions(customerId, productSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Modify Customer Plan Subscription
     * @param {string} customerId 
     * @param {string} subscriptionId 
     * @param {SubscriptionUpdateWithSlugs} subscriptionUpdateWithSlugs 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerSubscriptionsApi
     */
    public modifyCustomerPlanSubscription(customerId: string, subscriptionId: string, subscriptionUpdateWithSlugs: SubscriptionUpdateWithSlugs, options?: AxiosRequestConfig) {
        return CustomerSubscriptionsApiFp(this.configuration).modifyCustomerPlanSubscription(customerId, subscriptionId, subscriptionUpdateWithSlugs, options).then((request) => request(this.axios, this.basePath));
    }
}
