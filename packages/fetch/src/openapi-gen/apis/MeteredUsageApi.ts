/* tslint:disable */
/* eslint-disable */
/**
 * Planship API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  MeteredUsageIn,
  MeteringRecord,
  ResourceUsage,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MeteredUsageInFromJSON,
    MeteredUsageInToJSON,
    MeteringRecordFromJSON,
    MeteringRecordToJSON,
    ResourceUsageFromJSON,
    ResourceUsageToJSON,
} from '../models';

export interface GetMeteringIdResourcesUsageForCustomerRequest {
    customerId: string;
    productSlug: string;
    meteringId: string;
}

export interface GetResourceUsageForCustomerRequest {
    customerId: string;
    productSlug: string;
    resourceSlug: string;
}

export interface ReportMeteredUsageForCustomerRequest {
    customerId: string;
    productSlug: string;
    meteringId: string;
    meteredUsageIn: MeteredUsageIn;
}

/**
 * 
 */
export class MeteredUsageApi extends runtime.BaseAPI {

    /**
     * Get Metering Id Resources Usage For Customer
     */
    async getMeteringIdResourcesUsageForCustomerRaw(requestParameters: GetMeteringIdResourcesUsageForCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: ResourceUsage; }>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getMeteringIdResourcesUsageForCustomer.');
        }

        if (requestParameters.productSlug === null || requestParameters.productSlug === undefined) {
            throw new runtime.RequiredError('productSlug','Required parameter requestParameters.productSlug was null or undefined when calling getMeteringIdResourcesUsageForCustomer.');
        }

        if (requestParameters.meteringId === null || requestParameters.meteringId === undefined) {
            throw new runtime.RequiredError('meteringId','Required parameter requestParameters.meteringId was null or undefined when calling getMeteringIdResourcesUsageForCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/api/v1/customers/{customer_id}/products/{product_slug}/usage/{metering_id}`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"product_slug"}}`, encodeURIComponent(String(requestParameters.productSlug))).replace(`{${"metering_id"}}`, encodeURIComponent(String(requestParameters.meteringId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, ResourceUsageFromJSON));
    }

    /**
     * Get Metering Id Resources Usage For Customer
     */
    async getMeteringIdResourcesUsageForCustomer(requestParameters: GetMeteringIdResourcesUsageForCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: ResourceUsage; }> {
        const response = await this.getMeteringIdResourcesUsageForCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Resource Usage For Customer
     */
    async getResourceUsageForCustomerRaw(requestParameters: GetResourceUsageForCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResourceUsage>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getResourceUsageForCustomer.');
        }

        if (requestParameters.productSlug === null || requestParameters.productSlug === undefined) {
            throw new runtime.RequiredError('productSlug','Required parameter requestParameters.productSlug was null or undefined when calling getResourceUsageForCustomer.');
        }

        if (requestParameters.resourceSlug === null || requestParameters.resourceSlug === undefined) {
            throw new runtime.RequiredError('resourceSlug','Required parameter requestParameters.resourceSlug was null or undefined when calling getResourceUsageForCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/api/v1/customers/{customer_id}/products/{product_slug}/resources/{resource_slug}/usage`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"product_slug"}}`, encodeURIComponent(String(requestParameters.productSlug))).replace(`{${"resource_slug"}}`, encodeURIComponent(String(requestParameters.resourceSlug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResourceUsageFromJSON(jsonValue));
    }

    /**
     * Get Resource Usage For Customer
     */
    async getResourceUsageForCustomer(requestParameters: GetResourceUsageForCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResourceUsage> {
        const response = await this.getResourceUsageForCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Report Metered Usage For Customer
     */
    async reportMeteredUsageForCustomerRaw(requestParameters: ReportMeteredUsageForCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeteringRecord>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling reportMeteredUsageForCustomer.');
        }

        if (requestParameters.productSlug === null || requestParameters.productSlug === undefined) {
            throw new runtime.RequiredError('productSlug','Required parameter requestParameters.productSlug was null or undefined when calling reportMeteredUsageForCustomer.');
        }

        if (requestParameters.meteringId === null || requestParameters.meteringId === undefined) {
            throw new runtime.RequiredError('meteringId','Required parameter requestParameters.meteringId was null or undefined when calling reportMeteredUsageForCustomer.');
        }

        if (requestParameters.meteredUsageIn === null || requestParameters.meteredUsageIn === undefined) {
            throw new runtime.RequiredError('meteredUsageIn','Required parameter requestParameters.meteredUsageIn was null or undefined when calling reportMeteredUsageForCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oAuth2ClientCredentials", []);
        }

        const response = await this.request({
            path: `/api/v1/customers/{customer_id}/products/{product_slug}/usage/{metering_id}`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"product_slug"}}`, encodeURIComponent(String(requestParameters.productSlug))).replace(`{${"metering_id"}}`, encodeURIComponent(String(requestParameters.meteringId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MeteredUsageInToJSON(requestParameters.meteredUsageIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeteringRecordFromJSON(jsonValue));
    }

    /**
     * Report Metered Usage For Customer
     */
    async reportMeteredUsageForCustomer(requestParameters: ReportMeteredUsageForCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeteringRecord> {
        const response = await this.reportMeteredUsageForCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
