/* tslint:disable */
/* eslint-disable */
/**
 * Planship API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface Lever
 */
export interface Lever {
    /**
     * 
     * @type {string}
     * @memberof Lever
     */
    slug: string;
    /**
     * 
     * @type {string}
     * @memberof Lever
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof Lever
     */
    displayOrder?: number;
    /**
     * 
     * @type {string}
     * @memberof Lever
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof Lever
     */
    displayDescription?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Lever
     */
    displayExtraAttributes?: { [key: string]: string; };
    /**
     * 
     * @type {object}
     * @memberof Lever
     */
    configuration?: object;
    /**
     * 
     * @type {string}
     * @memberof Lever
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Lever
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Lever
     */
    entitlementDisplayValueTemplate?: string;
    /**
     * 
     * @type {string}
     * @memberof Lever
     */
    entitlementDisplayNameTemplate?: string;
    /**
     * 
     * @type {string}
     * @memberof Lever
     */
    entitlementDisplayDescriptionTemplate?: string;
    /**
     * 
     * @type {string}
     * @memberof Lever
     */
    leverTypeId: string;
    /**
     * 
     * @type {string}
     * @memberof Lever
     */
    productId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Lever
     */
    meteringIds: Array<string>;
    /**
     * 
     * @type {object}
     * @memberof Lever
     */
    entitlementSchemaJson?: object;
}

/**
 * Check if a given object implements the Lever interface.
 */
export function instanceOfLever(value: object): value is Lever {
    if (!('slug' in value) || value['slug'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('leverTypeId' in value) || value['leverTypeId'] === undefined) return false;
    if (!('productId' in value) || value['productId'] === undefined) return false;
    if (!('meteringIds' in value) || value['meteringIds'] === undefined) return false;
    return true;
}

export function LeverFromJSON(json: any): Lever {
    return LeverFromJSONTyped(json, false);
}

export function LeverFromJSONTyped(json: any, ignoreDiscriminator: boolean): Lever {
    if (json == null) {
        return json;
    }
    return {
        
        'slug': json['slug'],
        'id': json['id'],
        'displayOrder': json['display_order'] == null ? undefined : json['display_order'],
        'displayName': json['display_name'] == null ? undefined : json['display_name'],
        'displayDescription': json['display_description'] == null ? undefined : json['display_description'],
        'displayExtraAttributes': json['display_extra_attributes'] == null ? undefined : json['display_extra_attributes'],
        'configuration': json['configuration'] == null ? undefined : json['configuration'],
        'description': json['description'] == null ? undefined : json['description'],
        'name': json['name'],
        'entitlementDisplayValueTemplate': json['entitlement_display_value_template'] == null ? undefined : json['entitlement_display_value_template'],
        'entitlementDisplayNameTemplate': json['entitlement_display_name_template'] == null ? undefined : json['entitlement_display_name_template'],
        'entitlementDisplayDescriptionTemplate': json['entitlement_display_description_template'] == null ? undefined : json['entitlement_display_description_template'],
        'leverTypeId': json['lever_type_id'],
        'productId': json['product_id'],
        'meteringIds': json['metering_ids'],
        'entitlementSchemaJson': json['entitlement_schema_json'] == null ? undefined : json['entitlement_schema_json'],
    };
}

export function LeverToJSON(value?: Lever | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'slug': value['slug'],
        'id': value['id'],
        'display_order': value['displayOrder'],
        'display_name': value['displayName'],
        'display_description': value['displayDescription'],
        'display_extra_attributes': value['displayExtraAttributes'],
        'configuration': value['configuration'],
        'description': value['description'],
        'name': value['name'],
        'entitlement_display_value_template': value['entitlementDisplayValueTemplate'],
        'entitlement_display_name_template': value['entitlementDisplayNameTemplate'],
        'entitlement_display_description_template': value['entitlementDisplayDescriptionTemplate'],
        'lever_type_id': value['leverTypeId'],
        'product_id': value['productId'],
        'metering_ids': value['meteringIds'],
        'entitlement_schema_json': value['entitlementSchemaJson'],
    };
}

