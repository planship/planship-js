/* tslint:disable */
/* eslint-disable */
/**
 * Planship API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SubscriptionUpdateWithSlugs
 */
export interface SubscriptionUpdateWithSlugs {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionUpdateWithSlugs
     */
    planId?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionUpdateWithSlugs
     */
    renewPlanId?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionUpdateWithSlugs
     */
    planSlug?: string;
    /**
     * 
     * @type {string}
     * @memberof SubscriptionUpdateWithSlugs
     */
    renewPlanSlug?: string;
    /**
     * 
     * @type {number}
     * @memberof SubscriptionUpdateWithSlugs
     */
    maxSubscribers?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionUpdateWithSlugs
     */
    isActive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionUpdateWithSlugs
     */
    autoRenew?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof SubscriptionUpdateWithSlugs
     */
    renewAt?: Date;
}

/**
 * Check if a given object implements the SubscriptionUpdateWithSlugs interface.
 */
export function instanceOfSubscriptionUpdateWithSlugs(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SubscriptionUpdateWithSlugsFromJSON(json: any): SubscriptionUpdateWithSlugs {
    return SubscriptionUpdateWithSlugsFromJSONTyped(json, false);
}

export function SubscriptionUpdateWithSlugsFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubscriptionUpdateWithSlugs {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'planId': !exists(json, 'plan_id') ? undefined : json['plan_id'],
        'renewPlanId': !exists(json, 'renew_plan_id') ? undefined : json['renew_plan_id'],
        'planSlug': !exists(json, 'plan_slug') ? undefined : json['plan_slug'],
        'renewPlanSlug': !exists(json, 'renew_plan_slug') ? undefined : json['renew_plan_slug'],
        'maxSubscribers': !exists(json, 'max_subscribers') ? undefined : json['max_subscribers'],
        'isActive': !exists(json, 'is_active') ? undefined : json['is_active'],
        'autoRenew': !exists(json, 'auto_renew') ? undefined : json['auto_renew'],
        'renewAt': !exists(json, 'renew_at') ? undefined : (new Date(json['renew_at'])),
    };
}

export function SubscriptionUpdateWithSlugsToJSON(value?: SubscriptionUpdateWithSlugs | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'plan_id': value.planId,
        'renew_plan_id': value.renewPlanId,
        'plan_slug': value.planSlug,
        'renew_plan_slug': value.renewPlanSlug,
        'max_subscribers': value.maxSubscribers,
        'is_active': value.isActive,
        'auto_renew': value.autoRenew,
        'renew_at': value.renewAt === undefined ? undefined : (value.renewAt.toISOString()),
    };
}

